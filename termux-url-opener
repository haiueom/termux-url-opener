#!/usr/bin/env bash

# --- Configuration ---
# Add a version number. Remember to increment this when you make changes!
VERSION="2.0"
DOWNLOAD_DIR="$HOME/storage/downloads/termux"
UPDATER_URL="https://raw.githubusercontent.com/haiueom/termux-url-opener/main/update.sh"
mkdir -p "$DOWNLOAD_DIR"

# --- Colors ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- Helper Functions ---
print_header() {
    clear
    local bar="========================================="
    echo -e "${BLUE}${bar}${NC}"
    echo -e "${GREEN}[#] Termux URL Downloader (v$VERSION)${NC}"
    echo -e "${GREEN}[#] Script by: haiueom (Improved Version)${NC}"
    echo -e "${BLUE}${bar}${NC}"
}

log_message() {
    case "$1" in
        INFO)   echo -e "${BLUE}[*] $2${NC}" ;;
        SUCCESS) echo -e "${GREEN}[âœ“] $2${NC}" ;;
        ERROR)  echo -e "${RED}[!] $2${NC}" >&2 ;;
        WARN)   echo -e "${YELLOW}[?] $2${NC}" ;;
    esac
}

check_dependencies() {
    local missing_deps=()
    for cmd in "$@"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done

    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_message ERROR "Missing dependencies: ${missing_deps[*]}. Please install them."
        exit 1
    fi
}

# --- Update Function ---
# This function downloads and runs the external updater script.
update_script() {
    log_message INFO "Checking for updates..."
    # Create a temporary file for the updater script
    local updater_script
    updater_script=$(mktemp)

    # Download the updater script
    if ! curl -fLo "$updater_script" "$UPDATER_URL"; then
        log_message ERROR "Could not download the updater script."
        rm -f "$updater_script"
        return 1
    fi

    # Make the updater executable and run it
    chmod +x "$updater_script"
    # Execute the updater. It will clean up itself on failure, or we clean it up.
    bash "$updater_script"

    # Clean up the temporary updater script
    rm -f "$updater_script"

    log_message INFO "Update check finished. If an update was installed, please restart the script."
}


# --- Download Functions ---
download_mp4_ytdlp() {
    local url="$1"
    local target_dir="${DOWNLOAD_DIR}/ytdlp_video"
    mkdir -p "$target_dir"
    log_message INFO "Downloading MP4 video to: $target_dir"
    yt-dlp -f 'b[ext=mp4]/b' --output "$target_dir/%(title)s.%(ext)s" "$url"
}

download_mp3_ytdlp() {
    local url="$1"
    local target_dir="${DOWNLOAD_DIR}/ytdlp_audio"
    mkdir -p "$target_dir"
    log_message INFO "Downloading MP3 audio to: $target_dir"
    yt-dlp -f "ba[ext=m4a]/ba" -x --audio-format mp3 --audio-quality 0 --output "$target_dir/%(title)s.%(ext)s" "$url"
}

download_mp3_spotdl() {
    local url="$1"
    local target_dir="${DOWNLOAD_DIR}/spotdl"
    mkdir -p "$target_dir"
    log_message INFO "Downloading from Spotify to: $target_dir"
    spotdl download "$url" --output "$target_dir"
}

download_curl() {
    local url="$1"
    local target_dir="${DOWNLOAD_DIR}/curl"
    mkdir -p "$target_dir"
    log_message INFO "Downloading with curl to: $target_dir"
    (cd "$target_dir" && curl --remote-name --location --remote-header-name "$url")
}

download_wget() {
    local url="$1"
    local target_dir="${DOWNLOAD_DIR}/wget"
    mkdir -p "$target_dir"
    log_message INFO "Downloading with wget to: $target_dir"
    wget --content-disposition -P "$target_dir" "$url"
}

# --- Main Logic ---
check_dependencies yt-dlp spotdl curl wget

url="$1"
if [ -z "$url" ]; then
    print_header
    read -rp "$(echo -e "${YELLOW}Enter the URL to download: ${NC}")" url
    if [ -z "$url" ]; then
        log_message ERROR "No URL provided. Exiting."
        exit 1
    fi
fi

while true; do
    print_header
    log_message INFO "URL: ${url}"
    echo -e "${BLUE}-----------------------------------------${NC}"
    echo " [1] Download mp4  (yt-dlp)"
    echo " [2] Download mp3  (yt-dlp)"
    echo " [3] Download mp3  (spotdl)"
    echo " [4] Download file (curl)"
    echo " [5] Download file (wget)"
    echo " [u] Check for Updates"
    echo -e " [${RED}x${NC}] Exit"
    echo -e "${BLUE}-----------------------------------------${NC}"

    read -rp "$(echo -e "${YELLOW}Choose an option: ${NC}")" option
    echo

    case $option in
        1) download_mp4_ytdlp "$url" ;;
        2) download_mp3_ytdlp "$url" ;;
        3) download_mp3_spotdl "$url" ;;
        4) download_curl "$url" ;;
        5) download_wget "$url" ;;
        u|U) update_script ;;
        x|X)
            log_message INFO "Goodbye!"
            break
            ;;
        *)
            log_message ERROR "Invalid option '$option'."
            ;;
    esac

    echo
    log_message SUCCESS "Task finished."
    read -n 1 -s -r -p "Press any key to return to the menu..."
done
